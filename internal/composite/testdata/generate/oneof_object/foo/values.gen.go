// Code generated by jsonschema2go. DO NOT EDIT.
package foo

import (
	"encoding/json"
	"fmt"
	"github.com/jwilner/jsonschema2go/pkg/boxed"
)

// Bar gives you some dumb info
type Bar struct {
	Direction interface{}
}

func (m *Bar) Validate() error {
	return nil
}

func (m *Bar) UnmarshalJSON(data []byte) error {
	var discrim struct {
		Direction string `json:"direction"`
	}
	if err := json.Unmarshal(data, &discrim); err != nil {
		return err
	}
	switch discrim.Direction {
	case "l":
		m.Direction = new(Left)
	case "r":
		m.Direction = new(Right)
	default:
		return fmt.Errorf("unknown discriminator: %v", discrim.Direction)
	}
	return json.Unmarshal(data, m.Direction)
}

func (m *Bar) MarshalJSON() ([]byte, error) {
	return json.Marshal(m.Direction)
}

type Left struct {
	Direction boxed.String `json:"direction"`
	Value     boxed.Int64  `json:"value"`
}

func (m *Left) Validate() error {
	return nil
}

func (m *Left) MarshalJSON() ([]byte, error) {
	inner := struct {
		Direction *string `json:"direction,omitempty"`
		Value     *int64  `json:"value,omitempty"`
	}{}
	if m.Direction.Set {
		inner.Direction = &m.Direction.String
	}
	if m.Value.Set {
		inner.Value = &m.Value.Int64
	}
	return json.Marshal(inner)
}

type Right struct {
	Direction boxed.String  `json:"direction"`
	Value     boxed.Float64 `json:"value"`
}

func (m *Right) Validate() error {
	return nil
}

func (m *Right) MarshalJSON() ([]byte, error) {
	inner := struct {
		Direction *string  `json:"direction,omitempty"`
		Value     *float64 `json:"value,omitempty"`
	}{}
	if m.Direction.Set {
		inner.Direction = &m.Direction.String
	}
	if m.Value.Set {
		inner.Value = &m.Value.Float64
	}
	return json.Marshal(inner)
}

type valErr interface {
	ErrType() string
	JSONPath() []interface{}
	Path() []interface{}
	Message() string
}

type validationError struct {
	errType, message string
	jsonPath, path   []interface{}
}

func (e *validationError) ErrType() string {
	return e.errType
}

func (e *validationError) JSONPath() []interface{} {
	return e.jsonPath
}

func (e *validationError) Path() []interface{} {
	return e.path
}

func (e *validationError) Message() string {
	return e.message
}

func (e *validationError) Error() string {
	return fmt.Sprintf("%v: %v", e.path, e.message)
}

var _ valErr = new(validationError)
