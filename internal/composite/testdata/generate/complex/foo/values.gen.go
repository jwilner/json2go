// Code generated by jsonschema2go. DO NOT EDIT.
package foo

import (
	"encoding/json"
	"fmt"
	"regexp"
)

// generated from https://example.com/testdata/generate/complex/foo/address-details.json
type AddressDetails struct {
	Name   *string `json:"name,omitempty"`
	Prefix *string `json:"prefix,omitempty"`
}

func (m *AddressDetails) Validate() error {
	return nil
}

// generated from https://example.com/testdata/generate/complex/foo/dhcp-option.json
type DhcpOption struct {
	AlwaysSend *bool       `json:"always_send,omitempty"`
	Name       *string     `json:"name,omitempty"`
	Value      interface{} `json:"value,omitempty"`
}

func (m *DhcpOption) Validate() error {
	if m.Name == nil {
		return &validationError{
			errType:  "required",
			message:  "field required",
			path:     []interface{}{"Name"},
			jsonPath: []interface{}{"name"},
		}
	}
	if m.Value == nil {
		return &validationError{
			errType:  "required",
			message:  "field required",
			path:     []interface{}{"Value"},
			jsonPath: []interface{}{"value"},
		}
	}
	return nil
}

// generated from https://example.com/testdata/generate/complex/foo/expanded-reservation.json
type ExpandedReservation struct {
	Reservation
	ExpandedReservationAllOf1
}

func (m *ExpandedReservation) Validate() error {
	if err := m.Reservation.Validate(); err != nil {
		return err
	}
	if err := m.ExpandedReservationAllOf1.Validate(); err != nil {
		return err
	}
	return nil
}

// generated from https://example.com/testdata/generate/complex/foo/expanded-reservation.json#/allOf/1
type ExpandedReservationAllOf1 struct {
	AddressDetails *AddressDetails `json:"address_details,omitempty"`
}

func (m *ExpandedReservationAllOf1) Validate() error {
	if m.AddressDetails != nil {
		if err := m.AddressDetails.Validate(); err != nil {
			if err, ok := err.(valErr); ok {
				return &validationError{
					errType:  err.ErrType(),
					message:  err.Message(),
					path:     append([]interface{}{"AddressDetails"}, err.Path()...),
					jsonPath: append([]interface{}{"address_details"}, err.JSONPath()...),
				}
			}
			return err
		}
	}
	return nil
}

// generated from https://example.com/testdata/generate/complex/foo/expanded-scope.json
type ExpandedScope struct {
	Scope
	ExpandedScopeAllOf1
}

func (m *ExpandedScope) Validate() error {
	if err := m.Scope.Validate(); err != nil {
		return err
	}
	if err := m.ExpandedScopeAllOf1.Validate(); err != nil {
		return err
	}
	return nil
}

// generated from https://example.com/testdata/generate/complex/foo/expanded-scope.json#/allOf/1
type ExpandedScopeAllOf1 struct {
	AddressDetails *AddressDetails `json:"address_details,omitempty"`
}

func (m *ExpandedScopeAllOf1) Validate() error {
	if m.AddressDetails != nil {
		if err := m.AddressDetails.Validate(); err != nil {
			if err, ok := err.(valErr); ok {
				return &validationError{
					errType:  err.ErrType(),
					message:  err.Message(),
					path:     append([]interface{}{"AddressDetails"}, err.Path()...),
					jsonPath: append([]interface{}{"address_details"}, err.JSONPath()...),
				}
			}
			return err
		}
	}
	return nil
}

// generated from https://example.com/testdata/generate/complex/foo/expanded-scope-group-response.json
type ExpandedScopeGroupResponse struct {
	ScopeGroupResponse
	ExpandedScopeGroupResponseAllOf1
}

func (m *ExpandedScopeGroupResponse) Validate() error {
	if err := m.ScopeGroupResponse.Validate(); err != nil {
		return err
	}
	if err := m.ExpandedScopeGroupResponseAllOf1.Validate(); err != nil {
		return err
	}
	return nil
}

// generated from https://example.com/testdata/generate/complex/foo/expanded-scope-group-response.json#/allOf/1
type ExpandedScopeGroupResponseAllOf1 struct {
	Reservations ExpandedScopeGroupResponseAllOf1Reservations `json:"reservations"`
	Scopes       ExpandedScopeGroupResponseAllOf1Scopes       `json:"scopes"`
}

func (m *ExpandedScopeGroupResponseAllOf1) Validate() error {
	if err := m.Reservations.Validate(); err != nil {
		if err, ok := err.(valErr); ok {
			return &validationError{
				errType:  err.ErrType(),
				message:  err.Message(),
				path:     append([]interface{}{"Reservations"}, err.Path()...),
				jsonPath: append([]interface{}{"reservations"}, err.JSONPath()...),
			}
		}
		return err
	}
	if err := m.Scopes.Validate(); err != nil {
		if err, ok := err.(valErr); ok {
			return &validationError{
				errType:  err.ErrType(),
				message:  err.Message(),
				path:     append([]interface{}{"Scopes"}, err.Path()...),
				jsonPath: append([]interface{}{"scopes"}, err.JSONPath()...),
			}
		}
		return err
	}
	return nil
}

// generated from https://example.com/testdata/generate/complex/foo/reservation.json
type Reservation struct {
	ReservationAllOf0
	ReservationFields
}

func (m *Reservation) Validate() error {
	if err := m.ReservationAllOf0.Validate(); err != nil {
		return err
	}
	if err := m.ReservationFields.Validate(); err != nil {
		return err
	}
	return nil
}

// generated from https://example.com/testdata/generate/complex/foo/reservation.json#/allOf/0
type ReservationAllOf0 struct {
	ID *int64 `json:"id,omitempty"`
}

func (m *ReservationAllOf0) Validate() error {
	return nil
}

// generated from https://example.com/testdata/generate/complex/foo/reservation-fields.json
type ReservationFields struct {
	AddressID    *int64                   `json:"address_id,omitempty"`
	Dhcpv6       *bool                    `json:"dhcpv6,omitempty"`
	Mac          *string                  `json:"mac,omitempty"`
	Options      ReservationFieldsOptions `json:"options"`
	ScopeGroupID *int64                   `json:"scope_group_id,omitempty"`
}

var (
	reservationFieldsMacPattern = regexp.MustCompile(`^([0-9A-Fa-f]{2}:){5}[0-9A-Fa-f]{2}$`)
)

func (m *ReservationFields) Validate() error {
	if m.Options == nil {
		return &validationError{
			errType:  "required",
			message:  "field required",
			path:     []interface{}{"Options"},
			jsonPath: []interface{}{"options"},
		}
	}
	if m.Mac != nil && !reservationFieldsMacPattern.MatchString(*m.Mac) {
		return &validationError{
			errType:  "pattern",
			path:     []interface{}{"Mac"},
			jsonPath: []interface{}{"mac"},
			message:  fmt.Sprintf(`must match '^([0-9A-Fa-f]{2}:){5}[0-9A-Fa-f]{2}$' but got %q`, *m.Mac),
		}
	}
	if err := m.Options.Validate(); err != nil {
		if err, ok := err.(valErr); ok {
			return &validationError{
				errType:  err.ErrType(),
				message:  err.Message(),
				path:     append([]interface{}{"Options"}, err.Path()...),
				jsonPath: append([]interface{}{"options"}, err.JSONPath()...),
			}
		}
		return err
	}
	return nil
}

// generated from https://example.com/testdata/generate/complex/foo/scope.json
type Scope struct {
	ScopeAllOf0
	ScopeFields
}

func (m *Scope) Validate() error {
	if err := m.ScopeAllOf0.Validate(); err != nil {
		return err
	}
	if err := m.ScopeFields.Validate(); err != nil {
		return err
	}
	return nil
}

// generated from https://example.com/testdata/generate/complex/foo/scope.json#/allOf/0
type ScopeAllOf0 struct {
	ID *int64 `json:"id,omitempty"`
}

func (m *ScopeAllOf0) Validate() error {
	return nil
}

// generated from https://example.com/testdata/generate/complex/foo/scope-fields.json
type ScopeFields struct {
	AddressID         *int64             `json:"address_id,omitempty"`
	Options           ScopeFieldsOptions `json:"options"`
	ScopeGroupID      *int64             `json:"scope_group_id,omitempty"`
	ValidLifetimeSecs *int64             `json:"valid_lifetime_secs,omitempty"`
}

func (m *ScopeFields) Validate() error {
	if m.AddressID == nil {
		return &validationError{
			errType:  "required",
			message:  "field required",
			path:     []interface{}{"AddressID"},
			jsonPath: []interface{}{"address_id"},
		}
	}
	if m.Options == nil {
		return &validationError{
			errType:  "required",
			message:  "field required",
			path:     []interface{}{"Options"},
			jsonPath: []interface{}{"options"},
		}
	}
	if err := m.Options.Validate(); err != nil {
		if err, ok := err.(valErr); ok {
			return &validationError{
				errType:  err.ErrType(),
				message:  err.Message(),
				path:     append([]interface{}{"Options"}, err.Path()...),
				jsonPath: append([]interface{}{"options"}, err.JSONPath()...),
			}
		}
		return err
	}
	return nil
}

// generated from https://example.com/testdata/generate/complex/foo/scope-group-response.json
type ScopeGroupResponse struct {
	ScopeGroupUpdateable
	ScopeGroupResponseAllOf1
}

func (m *ScopeGroupResponse) Validate() error {
	if err := m.ScopeGroupUpdateable.Validate(); err != nil {
		return err
	}
	if err := m.ScopeGroupResponseAllOf1.Validate(); err != nil {
		return err
	}
	return nil
}

// generated from https://example.com/testdata/generate/complex/foo/scope-group-response.json#/allOf/1
type ScopeGroupResponseAllOf1 struct {
	ID        *int64 `json:"id,omitempty"`
	NetworkID *int64 `json:"network_id,omitempty"`
}

func (m *ScopeGroupResponseAllOf1) Validate() error {
	return nil
}

// generated from https://example.com/testdata/generate/complex/foo/scope-group-updateable.json
type ScopeGroupUpdateable struct {
	DhcpServiceID *int64 `json:"dhcp_service_id,omitempty"`
	Dhcpv4        `json:"dhcpv4,omitempty"`
	Dhcpv6        `json:"dhcpv6,omitempty"`
	Name          *string `json:"name,omitempty"`
	ReverseDns    *bool   `json:"reverse_dns,omitempty"`
}

func (m *ScopeGroupUpdateable) Validate() error {
	return nil
}

// generated from https://example.com/testdata/generate/complex/foo/expanded-scope-group-response.json#/allOf/1/properties/reservations
type ExpandedScopeGroupResponseAllOf1Reservations []ExpandedReservation

func (m ExpandedScopeGroupResponseAllOf1Reservations) MarshalJSON() ([]byte, error) {
	if m == nil {
		return []byte(`[]`), nil
	}
	return json.Marshal([]ExpandedReservation(m))
}

func (m ExpandedScopeGroupResponseAllOf1Reservations) Validate() error {
	return nil
}

// generated from https://example.com/testdata/generate/complex/foo/expanded-scope-group-response.json#/allOf/1/properties/scopes
type ExpandedScopeGroupResponseAllOf1Scopes []ExpandedScope

func (m ExpandedScopeGroupResponseAllOf1Scopes) MarshalJSON() ([]byte, error) {
	if m == nil {
		return []byte(`[]`), nil
	}
	return json.Marshal([]ExpandedScope(m))
}

func (m ExpandedScopeGroupResponseAllOf1Scopes) Validate() error {
	return nil
}

// the options assigned to this reservation
// generated from https://example.com/testdata/generate/complex/foo/reservation-fields.json#/properties/options
type ReservationFieldsOptions []DhcpOption

func (m ReservationFieldsOptions) MarshalJSON() ([]byte, error) {
	if m == nil {
		return []byte(`[]`), nil
	}
	return json.Marshal([]DhcpOption(m))
}

func (m ReservationFieldsOptions) Validate() error {
	for i := range m {
		if err := m[i].Validate(); err != nil {
			if err, ok := err.(valErr); ok {
				return &validationError{
					errType:  err.ErrType(),
					message:  err.Message(),
					path:     append([]interface{}{i}, err.Path()...),
					jsonPath: append([]interface{}{i}, err.JSONPath()...),
				}
			}
			return err
		}
	}
	return nil
}

// the options assigned to this scope
// generated from https://example.com/testdata/generate/complex/foo/scope-fields.json#/properties/options
type ScopeFieldsOptions []DhcpOption

func (m ScopeFieldsOptions) MarshalJSON() ([]byte, error) {
	if m == nil {
		return []byte(`[]`), nil
	}
	return json.Marshal([]DhcpOption(m))
}

func (m ScopeFieldsOptions) Validate() error {
	for i := range m {
		if err := m[i].Validate(); err != nil {
			if err, ok := err.(valErr); ok {
				return &validationError{
					errType:  err.ErrType(),
					message:  err.Message(),
					path:     append([]interface{}{i}, err.Path()...),
					jsonPath: append([]interface{}{i}, err.JSONPath()...),
				}
			}
			return err
		}
	}
	return nil
}

type valErr interface {
	ErrType() string
	JSONPath() []interface{}
	Path() []interface{}
	Message() string
}

type validationError struct {
	errType, message string
	jsonPath, path   []interface{}
}

func (e *validationError) ErrType() string {
	return e.errType
}

func (e *validationError) JSONPath() []interface{} {
	return e.jsonPath
}

func (e *validationError) Path() []interface{} {
	return e.path
}

func (e *validationError) Message() string {
	return e.message
}

func (e *validationError) Error() string {
	return fmt.Sprintf("%v: %v", e.path, e.message)
}

var _ valErr = new(validationError)
