// Code generated by jsonschema2go. DO NOT EDIT.
package foo

import (
	"encoding/json"
	"fmt"
	"github.com/jwilner/jsonschema2go/pkg/boxed"
)

// Bar gives you some dumb info
type Bar struct {
	Name boxed.String `json:"name"`
	Blob
}

func (m *Bar) Validate() error {
	if err := m.Blob.Validate(); err != nil {
		return err
	}
	return nil
}

func (m *Bar) MarshalJSON() ([]byte, error) {
	inner := struct {
		Name *string `json:"name,omitempty"`
		Blob
	}{
		Blob: m.Blob,
	}
	if m.Name.Set {
		inner.Name = &m.Name.String
	}
	return json.Marshal(inner)
}

type Blob struct {
	Count boxed.Int64 `json:"count"`
}

func (m *Blob) Validate() error {
	return nil
}

func (m *Blob) MarshalJSON() ([]byte, error) {
	inner := struct {
		Count *int64 `json:"count,omitempty"`
	}{}
	if m.Count.Set {
		inner.Count = &m.Count.Int64
	}
	return json.Marshal(inner)
}

type valErr interface {
	ErrType() string
	JSONPath() []interface{}
	Path() []interface{}
	Message() string
}

type validationError struct {
	errType, message string
	jsonPath, path   []interface{}
}

func (e *validationError) ErrType() string {
	return e.errType
}

func (e *validationError) JSONPath() []interface{} {
	return e.jsonPath
}

func (e *validationError) Path() []interface{} {
	return e.path
}

func (e *validationError) Message() string {
	return e.message
}

func (e *validationError) Error() string {
	return fmt.Sprintf("%v: %v", e.path, e.message)
}

var _ valErr = new(validationError)
