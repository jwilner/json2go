// Code generated by jsonschema2go. DO NOT EDIT.
package foo

import (
	"encoding/json"
	"fmt"
	"github.com/jwilner/jsonschema2go/pkg/boxed"
	"regexp"
)

// Bar contains some info
type Bar struct {
	Baz   boxed.String `json:"baz"`
	Count boxed.Int64  `json:"count"`
}

var (
	barBazPattern = regexp.MustCompile(`^[0-9a-fA-F]{10}$`)
)

func (m *Bar) Validate() error {
	if !m.Baz.Set {
		return &validationError{
			errType:  "required",
			message:  "field required",
			path:     []interface{}{"Baz"},
			jsonPath: []interface{}{"baz"},
		}
	}
	if !barBazPattern.MatchString(m.Baz.String) {
		return &validationError{
			errType:  "pattern",
			path:     []interface{}{"Baz"},
			jsonPath: []interface{}{"baz"},
			message:  fmt.Sprintf("must match '^[0-9a-fA-F]{10}$' but got %q", m.Baz.String),
		}
	}
	if m.Count.Set && m.Count.Int64 < 3 {
		return &validationError{
			errType:  "minimum",
			path:     []interface{}{"Count"},
			jsonPath: []interface{}{"count"},
			message:  fmt.Sprintf("must be greater than or equal to 3 but was %v", m.Count.Int64),
		}
	}
	return nil
}

func (m *Bar) MarshalJSON() ([]byte, error) {
	inner := struct {
		Baz   *string `json:"baz,omitempty"`
		Count *int64  `json:"count,omitempty"`
	}{}
	if m.Baz.Set {
		inner.Baz = &m.Baz.String
	}
	if m.Count.Set {
		inner.Count = &m.Count.Int64
	}
	return json.Marshal(inner)
}

type valErr interface {
	ErrType() string
	JSONPath() []interface{}
	Path() []interface{}
	Message() string
}

type validationError struct {
	errType, message string
	jsonPath, path   []interface{}
}

func (e *validationError) ErrType() string {
	return e.errType
}

func (e *validationError) JSONPath() []interface{} {
	return e.jsonPath
}

func (e *validationError) Path() []interface{} {
	return e.path
}

func (e *validationError) Message() string {
	return e.message
}

func (e *validationError) Error() string {
	return fmt.Sprintf("%v: %v", e.path, e.message)
}

var _ valErr = new(validationError)
