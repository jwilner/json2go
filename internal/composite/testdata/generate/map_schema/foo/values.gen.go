// Code generated by jsonschema2go. DO NOT EDIT.
package foo

import (
	"encoding/json"
	"fmt"
)

// Bar contains some info
// generated from https://example.com/testdata/generate/map_schema/foo/bar.json
type Bar struct {
	Baz BarBaz `json:"baz,omitempty"`
	Biz BarBiz `json:"biz,omitempty"`
}

func (m *Bar) Validate() error {
	if err := m.Biz.Validate(); err != nil {
		if err, ok := err.(valErr); ok {
			return &validationError{
				errType:  err.ErrType(),
				message:  err.Message(),
				path:     append([]interface{}{"Biz"}, err.Path()...),
				jsonPath: append([]interface{}{"biz"}, err.JSONPath()...),
			}
		}
		return err
	}
	return nil
}

// generated from https://example.com/testdata/generate/map_schema/foo/bar.json#/properties/baz
type BarBaz struct {
}

func (m *BarBaz) Validate() error {
	return nil
}

// generated from https://example.com/testdata/generate/map_schema/foo/bar.json#/properties/biz
type BarBiz []string

func (m BarBiz) MarshalJSON() ([]byte, error) {
	if m == nil {
		return []byte(`[]`), nil
	}
	return json.Marshal([]string(m))
}

func (m BarBiz) Validate() error {
	return nil
}

type valErr interface {
	ErrType() string
	JSONPath() []interface{}
	Path() []interface{}
	Message() string
}

type validationError struct {
	errType, message string
	jsonPath, path   []interface{}
}

func (e *validationError) ErrType() string {
	return e.errType
}

func (e *validationError) JSONPath() []interface{} {
	return e.jsonPath
}

func (e *validationError) Path() []interface{} {
	return e.path
}

func (e *validationError) Message() string {
	return e.message
}

func (e *validationError) Error() string {
	return fmt.Sprintf("%v: %v", e.path, e.message)
}

var _ valErr = new(validationError)
