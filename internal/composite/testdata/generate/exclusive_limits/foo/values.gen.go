// Code generated by jsonschema2go. DO NOT EDIT.
package foo

import (
	"fmt"
)

// Bar is generated from https://example.com/testdata/generate/exclusive_limits/foo/bar.json
// Bar gives you some dumb info
type Bar struct {
	ExclInteger30 *int64 `json:"exclInteger_3_0,omitempty"`
	ExclInteger31 *int64 `json:"exclInteger_3_1,omitempty"`
}

// Validate returns an error if this value is invalid according to rules defined in https://example.com/testdata/generate/exclusive_limits/foo/bar.json
func (m *Bar) Validate() error {
	if m.ExclInteger30 != nil && *m.ExclInteger30 >= 10 {
		return &validationError{
			errType:  "maximumExclusive",
			path:     []interface{}{"ExclInteger30"},
			jsonPath: []interface{}{"exclInteger_3_0"},
			message:  fmt.Sprintf("must be less than 10 but was %v", *m.ExclInteger30),
		}
	}
	if m.ExclInteger30 != nil && *m.ExclInteger30 <= 1 {
		return &validationError{
			errType:  "minimumExclusive",
			path:     []interface{}{"ExclInteger30"},
			jsonPath: []interface{}{"exclInteger_3_0"},
			message:  fmt.Sprintf("must be greater than 1 but was %v", *m.ExclInteger30),
		}
	}
	if m.ExclInteger31 != nil && *m.ExclInteger31 >= 10 {
		return &validationError{
			errType:  "maximumExclusive",
			path:     []interface{}{"ExclInteger31"},
			jsonPath: []interface{}{"exclInteger_3_1"},
			message:  fmt.Sprintf("must be less than 10 but was %v", *m.ExclInteger31),
		}
	}
	if m.ExclInteger31 != nil && *m.ExclInteger31 <= 1 {
		return &validationError{
			errType:  "minimumExclusive",
			path:     []interface{}{"ExclInteger31"},
			jsonPath: []interface{}{"exclInteger_3_1"},
			message:  fmt.Sprintf("must be greater than 1 but was %v", *m.ExclInteger31),
		}
	}
	return nil
}

type valErr interface {
	ErrType() string
	JSONPath() []interface{}
	Path() []interface{}
	Message() string
}

type validationError struct {
	errType, message string
	jsonPath, path   []interface{}
}

func (e *validationError) ErrType() string {
	return e.errType
}

func (e *validationError) JSONPath() []interface{} {
	return e.jsonPath
}

func (e *validationError) Path() []interface{} {
	return e.path
}

func (e *validationError) Message() string {
	return e.message
}

func (e *validationError) Error() string {
	return fmt.Sprintf("%v: %v", e.path, e.message)
}

var _ valErr = new(validationError)
