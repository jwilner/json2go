{{/* gotype: github.com/ns1/jsonschema2go.tuplePlanContext */}}

{{ if .ID -}}
// {{ .Type.Name }} is generated from {{ .ID }}
{{ end -}}
{{ if .Comment -}}
{{ .Comment }}
{{ end -}}
type {{ .Type.Name }} [{{ .ArrayLength }}]interface{}

{{ if .ValidateInitialize }}
    var (
{{ range $idx, $item := .Items -}}
{{ range $item.Validators -}}
        {{ .Var (.NameSpace $.Type.Name $idx) }}
{{ end -}}
{{ end -}}
    )
{{ end -}}

// Validate returns an error if this value is invalid according to rules defined in {{ .ID }}
func (t *{{ .Type.Name }}) Validate() error {
{{ range $idx, $Item := .Items -}}
{{ range $Item.Validators -}}
{{ if eq .Name "subschema" -}}
        if v, ok := m[{{ $idx }}].(interface { Validate() error }); ok {
            if err := v.Validate(); err != nil {
                return err
            }
        }
{{ else -}}
        if v, ok := m[{{ $idx }}].({{ .ImpliedType }}); !ok {
            return &validationError{
                errType: "type",
                path: []interface{}{ {{ $idx }} },
                jsonPath: []interface{}{ {{ $idx }} },
                message: fmt.Sprintf("must be {{ .ImpliedType }} but got %T", m[{{ $idx }}]),
            }
        } else if {{ .Test ($Item.NameSpace) "v" }} {
            return &validationError{
                errType: "{{ .Name }}",
                path: []interface{}{ {{ $idx }} },
                jsonPath: []interface{}{ {{ $idx }} },
                message: fmt.Sprintf({{ .Sprintf ($Item.NameSpace) "v" }}),
            }
        }
{{ end -}}
{{ end -}}
{{ end -}}
    return nil
}

func (t *{{ .Type.Name }}) UnmarshalJSON(data []byte) error {
    var msgs []json.RawMessage
    if err := json.Unmarshal(data, &msgs); err != nil {
        return err
    }
{{ range $idx, $_ := .Items -}}
    if len(msgs) > {{ $idx }} {
        var item {{ $.QualName .Type }}
        if err := json.Unmarshal(msgs[{{ $idx }}], &item); err != nil {
            return err
        }
        t[{{ $idx }}] = item
    }
{{ end -}}
    return nil
}
