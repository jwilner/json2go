[
    {
        "description": "simple enum validation",
        "skip": "integer enums not yet supported",
        "schema": {"type": "object", "properties": {"a": {"enum": [1, 2, 3]}}},
        "tests": [
            {
                "description": "one of the enum is valid",
                "data": 1,
                "valid": true
            },
            {
                "description": "something else is invalid",
                "data": 4,
                "valid": false
            }
        ]
    },
    {
        "description": "enums in properties",
        "schema": {
            "type":"object",
            "properties": {
                "foo": {"enum":["foo"]},
                "bar": {"enum":["bar"]}
            },
            "required": ["bar"]
        },
        "tests": [
            {
                "description": "both properties are valid",
                "data": {"foo":"foo", "bar":"bar"},
                "valid": true
            },
            {
                "description": "missing optional property is valid",
                "data": {"bar":"bar"},
                "valid": true
            },
            {
                "description": "missing required property is invalid",
                "data": {"foo":"foo"},
                "valid": false
            },
            {
                "description": "missing all properties is invalid",
                "data": {},
                "valid": false
            }
        ]
    },
    {
        "description": "enum with escaped characters",
        "skip": "don't currently support invalid go symbol characters",
        "schema": {"type": "string", "enum": ["foo\nbar", "foo\rbar"]},
        "tests": [
            {
                "description": "member 1 is valid",
                "data": "foo\nbar",
                "valid": true
            },
            {
                "description": "member 2 is valid",
                "data": "foo\rbar",
                "valid": true
            },
            {
                "description": "another string is invalid",
                "data": "abc",
                "valid": false
            }
        ]
    },
    {
        "skip": "boolean enum not supported",
        "description": "enum with false does not match 0",
        "schema": {"enum": [false]},
        "tests": [
            {
                "description": "false is valid",
                "data": false,
                "valid": true
            },
            {
                "description": "integer zero is invalid",
                "data": 0,
                "valid": false
            },
            {
                "description": "float zero is invalid",
                "data": 0.0,
                "valid": false
            }
        ]
    },
    {
        "skip": "boolean enum not supported",
        "description": "enum with true does not match 1",
        "schema": {"enum": [true]},
        "tests": [
            {
                "description": "true is valid",
                "data": true,
                "valid": true
            },
            {
                "description": "integer one is invalid",
                "data": 1,
                "valid": false
            },
            {
                "description": "float one is invalid",
                "data": 1.0,
                "valid": false
            }
        ]
    },
    {
        "description": "enum with 0 does not match false",
        "schema": {"type": "object", "properties": {"a": {"type": "number", "enum": [0]}}},
        "tests": [
            {
                "description": "false is invalid",
                "data": {"a":  false},
                "valid": false
            },
            {
                "description": "integer zero is valid",
                "data": {"a":  0},
                "valid": true
            },
            {
                "description": "float zero is valid",
                "data": {"a":  0.0},
                "valid": true
            }
        ]
    },
    {
        "description": "enum with 1 does not match true",
        "schema": {"type": "object", "properties": {"a": {"type": "number", "enum": [1]}}},
        "tests": [
            {
                "description": "true is invalid",
                "data": {"a":  true},
                "valid": false
            },
            {
                "description": "integer one is valid",
                "data": {"a":  1},
                "valid": true
            },
            {
                "description": "float one is valid",
                "data": {"a":  1.0},
                "valid": true
            }
        ]
    }
]
