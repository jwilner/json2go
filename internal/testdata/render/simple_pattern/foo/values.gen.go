// Code generated by jsonschema2go. DO NOT EDIT.
package foo

import (
	"encoding/json"
	"fmt"
	"github.com/jwilner/jsonschema2go/boxed"
	"regexp"
)

// Bar gives you some dumb info
type Bar struct {
	Name boxed.String `json:"name"`
}

var (
	barNamePattern = regexp.MustCompile(`^[0-9]+$`)
)

func (m *Bar) Validate() error {
	if m.Name.Set && !barNamePattern.MatchString(m.Name.String) {
		return &BarValidationError{
			errType:   "pattern",
			jsonField: "name",
			field:     "Name",
			message:   fmt.Sprintf("must match '^[0-9]+$' but got %q", m.Name.String),
		}
	}
	return nil
}

func (m *Bar) MarshalJSON() ([]byte, error) {
	inner := struct {
		Name *string `json:"name,omitempty"`
	}{}
	if m.Name.Set {
		inner.Name = &m.Name.String
	}
	return json.Marshal(inner)
}

type BarValidationError struct {
	errType, jsonField, field, message string
}

func (e *BarValidationError) ErrType() string {
	return e.errType
}

func (e *BarValidationError) JSONField() string {
	return e.jsonField
}

func (e *BarValidationError) Field() string {
	return e.field
}

func (e *BarValidationError) Message() string {
	return e.message
}

func (e *BarValidationError) Error() string {
	return fmt.Sprintf("%v: %v", e.field, e.message)
}
