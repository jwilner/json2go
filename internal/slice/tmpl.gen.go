// Code generated by internal/cmd/embedtmpl/embedtmpl.go DO NOT EDIT.
package slice

import (
	"text/template"
)

var tmpl = template.Must(template.New("").Parse(`{{/* gotype: github.com/ns1/jsonschema2go.slicePlanContext */}}

// {{ .Type.Name }} is generated from {{ .ID }}
{{ if .Comment -}}
{{ .Comment }}
{{ end -}}
type {{ .Type.Name }} []{{ if .ItemType.Pointer }}*{{ end }}{{ $.QualName .ItemType }}

{{ if .ItemValidateInitialize }}
var (
{{ range .ItemValidators -}}
{{ with $v := .Var (.NameSpace $.Type.Name "Items") -}}
    {{ $v }}
{{ end -}}
{{ end -}}
)
{{ end -}}

// Validate returns an error if this value is invalid according to rules defined in {{ .ID }}
func (m {{ $.Type.Name }}) Validate() error {
{{ range .Validators -}}
{{ if eq .Name "uniqueItems" -}}
    seen := make(map[{{$.QualName $.ItemType}}]bool)
    for i, v := range m {
        if seen[v] {
            return &validationError{
                errType: "uniqueItems",
                message: fmt.Sprintf("items must be unique but %v occurs more than once", v),
                path: []interface{}{i},
                jsonPath: []interface{}{i},
            }
        }
        seen[v] = true
    }
{{ else -}}
	if {{ .Test (.NameSpace $.Type.Name) "m" }} {
		return &validationError{
			errType: "{{ .Name }}",
			message: fmt.Sprintf({{ .Sprintf (.NameSpace $.Type.Name) "m" }}),
		}
	}
{{ end -}}
{{ end -}}
{{ with .ItemValidators -}}
    for i := range m {
        {{ range . -}}
        {{ if eq .Name "subschema" -}}
        if err := m[i].Validate(); err != nil {
            if err, ok := err.(valErr); ok {
                return &validationError{
                    errType: err.ErrType(),
                    message: err.Message(),
                    path: append([]interface{}{i}, err.Path()...),
                    jsonPath: append([]interface{}{i}, err.JSONPath()...),
                }
            }
            return err
        }
        {{ else -}}
        if {{ .Test (.NameSpace $.Type.Name "Items") "m[i]" }} {
            return &validationError{
                errType: "{{ .Name }}",
                message: fmt.Sprintf({{ .Sprintf (.NameSpace $.Type.Name "Items") "m[i]" }}),
                path: []interface{}{i},
                jsonPath: []interface{}{i},
            }
        }
        {{ end -}}
        {{ end -}}
    }
{{ end -}}
	return nil
}
`))
