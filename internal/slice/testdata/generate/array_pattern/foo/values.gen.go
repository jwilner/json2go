// Code generated by jsonschema2go. DO NOT EDIT.
package foo

import (
	"fmt"
)

// Bar is generated from https://example.com/testdata/generate/array_pattern/foo/bar.json
// Bar gives you lots of dumb info
type Bar []string

var (
	barItemsPattern = regexp.MustCompile(`^[a-z]{10}$`)
)

// Validate returns an error if this value is invalid according to rules defined in https://example.com/testdata/generate/array_pattern/foo/bar.json
func (m Bar) Validate() error {
	for i := range m {
		if len(m[i]) < 3 {
			return &validationError{
				errType:  "minLength",
				message:  fmt.Sprintf("must have length greater than 3 but was %d", len(m[i])),
				path:     []interface{}{i},
				jsonPath: []interface{}{i},
			}
		}
		if !barItemsPattern.MatchString(m[i]) {
			return &validationError{
				errType:  "pattern",
				message:  fmt.Sprintf(`must match '^[a-z]{10}$' but got %q`, m[i]),
				path:     []interface{}{i},
				jsonPath: []interface{}{i},
			}
		}
	}
	return nil
}

type valErr interface {
	ErrType() string
	JSONPath() []interface{}
	Path() []interface{}
	Message() string
}

type validationError struct {
	errType, message string
	jsonPath, path   []interface{}
}

func (e *validationError) ErrType() string {
	return e.errType
}

func (e *validationError) JSONPath() []interface{} {
	return e.jsonPath
}

func (e *validationError) Path() []interface{} {
	return e.path
}

func (e *validationError) Message() string {
	return e.message
}

func (e *validationError) Error() string {
	return fmt.Sprintf("%v: %v", e.path, e.message)
}

var _ valErr = new(validationError)
