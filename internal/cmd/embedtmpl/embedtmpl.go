package main

import (
	"bytes"
	"fmt"
	"go/format"
	"io/ioutil"
	"log"
	"os"
	"text/template"
)

func main() {
	if len(os.Args) != 4 {
		log.Fatal("Usage: embedtmpl PKG TEMPLATE_PATH OUTPUT_PATH", os.Args)
	}
	if err := run(os.Args[1], os.Args[2], os.Args[3]); err != nil {
		log.Fatal(err)
	}
}

func run(pkg, templatePath, outputPath string) error {
	b, err := ioutil.ReadFile(templatePath)
	if err != nil {
		return fmt.Errorf("%v: %w", templatePath, err)
	}

	// this will be enclosed within a raw string so replace any ` with `+"`"+`
	t := string(bytes.ReplaceAll(b, []byte("`"), []byte{'`', '+', '"', '`', '"', '+', '`'}))

	var buf bytes.Buffer
	if err = template.Must(template.New("").Parse(`// Code generated by internal/cmd/embedtmpl/embedtmpl.go DO NOT EDIT.
package {{ .Package }}

import (
	"text/template"
)

var tmpl = template.Must(template.New("").Parse(`+"`"+`{{- .TemplateString -}}`+"`"+`))
`)).Execute(&buf, &struct {
		Package        string
		TemplateString string
	}{
		Package:        pkg,
		TemplateString: t,
	}); err != nil {
		return fmt.Errorf("tmpl exec: %w", err)
	}

	formatted, err := format.Source(buf.Bytes())
	if err != nil {
		return fmt.Errorf("format.Source: %w", err)
	}

	f, err := os.Create(outputPath)
	if err != nil {
		return fmt.Errorf("create templates.gen.go: %w", err)
	}
	defer func() {
		_ = f.Close()
	}()

	_, err = f.Write(formatted)
	return err
}
