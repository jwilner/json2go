package main

import (
	"bytes"
	"fmt"
	"go/format"
	"io/ioutil"
	"log"
	"os"
	"path"
	"path/filepath"
	"text/template"
)

func main() {
	if err := run(); err != nil {
		log.Fatal(err)
	}
}

func run() error {
	paths, err := filepath.Glob("templates/*.tmpl")
	if err != nil {
		return err
	}

	type tmpl struct {
		Name    string
		TmplStr string
	}

	var tmpls []tmpl
	for _, p := range paths {
		b, err := ioutil.ReadFile(p)
		if err != nil {
			return fmt.Errorf("%v: %w", p, err)
		}
		tmpls = append(
			tmpls,
			tmpl{
				path.Base(p),
				// this will be enclosed within a raw string so replace any ` with `+"`"+`
				string(bytes.ReplaceAll(b, []byte("`"), []byte{'`', '+', '"', '`', '"', '+', '`'})),
			},
		)
	}

	var buf bytes.Buffer
	if err = template.Must(template.New("").Parse(`// Code generated by internal/cmd/gentmpl/gentmpl.go DO NOT EDIT.
package print

import (
	"text/template"
)

var valueTmpl *template.Template

func init() {
	valueTmpl = template.New("")
{{ range . -}}
	valueTmpl = template.Must(valueTmpl.New("{{- .Name -}}").Parse(`+"`"+`{{- .TmplStr -}}`+"`"+`))
{{ end -}}
}

`)).Execute(&buf, tmpls); err != nil {
		return fmt.Errorf("tmpl exec: %w", err)
	}

	formatted, err := format.Source(buf.Bytes())
	if err != nil {
		return fmt.Errorf("format.Source: %w", err)
	}

	f, err := os.Create("internal/print/templates.gen.go")
	if err != nil {
		return fmt.Errorf("create templates.gen.go: %w", err)
	}
	defer func() {
		_ = f.Close()
	}()

	_, err = f.Write(formatted)
	return err
}
